<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <!--
  Simple demo project showing how to create a MicroService within a Docker container
  using Tomcat in embedded mode

  This example simply installs a Jolokia Agent Servlet (www.jolokia.org) as a microservice with an embedded
  Tomcat into a Docker Image.

  The integration will startup this image, runs a simple test checking the version and then stops the container.

  The following goals are useful:

  * 'mvn package docker:build' : Build FAT-jar and container
  * 'mvn install'              : Build fat-jar, build container, start container, test, stop container, remove container
  * 'mvn package docker:push'  : Push container upstream (you would have to change the repository name in the maven plugin
                                 for proper authentication, thouhg)

  The test with 'mvn install' does the following in detail:

  * Create a "fat" jar via the maven-shade-plugin
  * Creates a Docker data container with 'tomcat-jolokia.jar' as described in assembly descriptor src/main/docker-assembly.xml
  * Starts (and optionally pull) the jolokia/tomcat-7.0 container with the data container linked to it
  * Waits until Tomcat is up (i.e. until it is reachable via an HTTP request)
  * Runs an integration test via maven-failsafe-plugin, using rest-assured for accessing the deployed app.
  * Prints out some version information about the contaner running (in order prove that's not a fake ;-)
  * Stops and removes the containers.

  -->

  <groupId>io.fabric8</groupId>
  <artifactId>shootout-docker-maven</artifactId>
  <version>0.0.1-SNAPSHOT</version>

  <properties>
    <tomcat.version>7.0.55</tomcat.version>

    <!--  Current versions as of 2016-2-26: -->
    <docker.maven.plugin.fabric8.version>0.20.1</docker.maven.plugin.fabric8.version>

    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
  </properties>

  <profiles>

    <!--
      ====== fabric8/docker-maven-plugin =======================================================

      The fabric8 plugin uses a configuration sectiosn for all images to maintain. It has config section
      for each section, which is divided in a build and run part for building instructions and rumtime configuration,
      respectively. The service image dynamically adds files as described in the assembly descriptor
      src/main/fabric8/docker-assembly.xml

      To build the images:

      mvn -Pfabric8 docker:build

      To create containers and start them:

      mvn -Pfabric8 docker:build docker:start

      Calling

      mvn -Pfabric8 install

      will perform all the above plus more: Create images, start container, run unit tests,
      stop containers, cleanup.
      -->
    <profile>
      <id>fabric8</id>
      <build>
        <plugins>
          <plugin>
            <!-- The Docker Maven plugin is used to create docker image with the fat jar -->
            <groupId>io.fabric8</groupId>
            <artifactId>docker-maven-plugin</artifactId>
            <version>${docker.maven.plugin.fabric8.version}</version>
            <configuration>
              <logDate>default</logDate>
              <autoPull>true</autoPull>
              <images>
                <image>
                  <!-- Alias name which can used for linking containers during runtime -->
                  <alias>hadoop</alias>
                  <name>hadoopimagen</name> <!-- Nombre que tendrá la imagen -->
                  <!-- <build>
                    <dockerFileDir>hadoop</dockerFileDir>
                    <assembly>
                      <inline>
                        <fileSet>
                          <directory>${project.build.outputDirectory}</directory>
                          <outputDirectory>/</outputDirectory>
                          <includes>
                            <include>hdfsTestFiles*/**</include>
                          </includes>
                        </fileSet>
                      </inline>

                    </assembly>
                  </build> -->

                  <build>
                    <from>10.142.250.69/dockerbaseimages/hadoop-2.7.3:latest</from>
                    <assembly>
                      <inline>
                        <fileSet>
                          <directory>${project.build.outputDirectory}</directory>
                          <outputDirectory>/</outputDirectory>
                          <includes>
                            <include>hdfsTestFiles*/**</include>
                          </includes>
                        </fileSet>
                      </inline>
                    </assembly>
                    <!-- Expose ports -->
                    <ports>
                      <port>9000</port>
                    </ports>
                    <cmd>bash -c "service ssh restart &amp;&amp; start-dfs.sh  &amp;&amp; /opt/hadoop/bin/hadoop fs -put /maven/* / &amp;&amp; echo 'COMPLETED' &amp;&amp; tail -f /dev/null"</cmd>
                  </build>

                  <run>
                    <ports>
                      <port>hadoop.port:9000</port> <!-- Mapeo de puertos. varible:puertolocal:puertocontainer -->
                    </ports>
                    <wait> <!-- Esperamos máximo 2 minutos por COMPLETED en el OUTPUT -->
                      <time>120000</time>
                      <log>COMPLETED</log>
                    </wait>
                    <log>
                      <prefix>HADOOP</prefix>
                      <color>cyan</color>
                    </log>
                  </run>
                </image>

                <image>
                  <!-- Alias name which can used for linking containers during runtime -->
                  <alias>zookeeper</alias>
                  <name>zookeeperimagen</name> <!-- Nombre que tendrá la imagen -->
                  <build>
                    <from>10.142.250.69/dockerbaseimages/zookeeper-3.4.9:latest</from>
                    <!-- Expose ports -->
                    <ports>
                      <port>2181</port>
                    </ports>
                  </build>

                  <run>
                    <ports>
                      <port>zookeeper.port:2181</port> <!-- Mapeo de puertos. varible:puertolocal:puertocontainer -->
                    </ports>
                    <wait>
                      <time>120000</time>
                      <log>binding to port 0.0.0.0/0.0.0.0:2181</log>
                    </wait>
                    <log>
                      <prefix>ZOOKEEPER</prefix>
                      <color>cyan</color>
                    </log>
                  </run>
                </image>
                <image>
                  <!-- Alias name which can used for linking containers during runtime -->
                  <alias>kafka</alias>
                  <name>kafkaimagen</name> <!-- Nombre que tendrá la imagen -->
                  <build>
                    <from>10.142.250.69/dockerbaseimages/kafka-2.11-0.10.1.0:latest</from>
                    <!-- Expose ports -->
                    <ports>
                      <port>9092</port>
                    </ports>
                  </build>

                  <run>
                    <env>
                      <KAFKA_ADVERTISED_PORT>9092</KAFKA_ADVERTISED_PORT>
                      <KAFKA_ADVERTISED_HOST_NAME>kafka</KAFKA_ADVERTISED_HOST_NAME>
                      <KAFKA_ZOOKEEPER_CONNECT>zookeeper:2181</KAFKA_ZOOKEEPER_CONNECT>
                    </env>
                    <ports>
                      <port>9092:9092</port> <!-- Mapeo de puertos. varible:puertolocal:puertocontainer -->
                    </ports>
                    <links>
                      <link>zookeeper:zookeeper</link>
                    </links>
                    <wait>
                      <time>300000</time>
                      <log>started</log>
                    </wait>
                    <log>
                      <prefix>KAFKA</prefix>
                      <color>cyan</color>
                    </log>
                  </run>
                </image>
                <image>
                  <!-- Alias name which can used for linking containers during runtime -->
                  <alias>spark</alias>
                  <name>sparkimagen</name> <!-- Nombre que tendrá la imagen -->
                  <build>
                    <from>stratio/mesosphere-spark-scala211</from>
                    <assembly>
                    <inline>
                    <dependencySets>
                      <dependencySet>
                        <outputDirectory>jdbc</outputDirectory>
                        <useProjectArtifact>false</useProjectArtifact>
                        <includes>
                          <include>com.datio.commons:examples:jar</include>
                        </includes>
                      </dependencySet>
                    </dependencySets>
                    </inline>
                    </assembly>
                    <!-- Expose ports -->
                    <ports>
                      <port>4040</port>
                      <port>18080</port>
                      <port>5005</port>
                    </ports>
                    <cmd>tail -f /dev/null</cmd>
                  </build>
                  <run>
                    <ports>
                      <port>4040:4040</port> <!-- Mapeo de puertos. varible:puertolocal:puertocontainer -->
                      <port>5005:5005</port>
                      <port>18080:18080</port>
                    </ports>
                    <links>
                      <link>hadoop:hadoop</link>
                      <link>kafka:kafka</link>
                    </links>
                    <log>
                      <prefix>SPARK</prefix>
                      <color>cyan</color>
                    </log>
                  </run>
                </image>
               </images>
            </configuration>

            <!-- Hooking into the lifecycle -->
            <executions>
              <execution>
                <id>start</id>
                <phase>pre-integration-test</phase>
                <goals>
                  <goal>build</goal> <!-- Construye imagenes con build sección -->
                  <goal>start</goal> <!-- Crea y arranca contenedores con run sección -->
                </goals>
              </execution>
             <!-- <execution>
                <id>stop</id>
                <phase>post-integration-test</phase>
                <goals>
                  <goal>stop</goal>
                </goals>
              </execution>-->
            </executions>
          </plugin>

          <plugin>
            <artifactId>maven-failsafe-plugin</artifactId>
            <configuration>
              <systemPropertyVariables>
                <log.url>http://${docker.host.address}:${tomcat.port}/jolokia</log.url>
              </systemPropertyVariables>
            </configuration>
          </plugin>

        </plugins>
      </build>
      <activation>
        <activeByDefault/>
      </activation>
    </profile>
</profiles>

  <!-- ============================================================================================= -->

  <dependencies>
    <dependency>
      <groupId>org.apache.tomcat</groupId>
      <artifactId>tomcat-util</artifactId>
      <version>${tomcat.version}</version>
    </dependency>

    <dependency>
      <groupId>org.apache.tomcat.embed</groupId>
      <artifactId>tomcat-embed-core</artifactId>
      <version>${tomcat.version}</version>
    </dependency>

    <dependency>
      <groupId>org.postgresql</groupId>
      <artifactId>postgresql</artifactId>
      <version>9.3-1100-jdbc41</version>
    </dependency>

    <dependency>
      <groupId>org.flywaydb</groupId>
      <artifactId>flyway-core</artifactId>
      <version>3.1</version>
    </dependency>

    <!-- ======================================================================================  -->
    <!-- Test -->

    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>4.11</version>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>com.jayway.restassured</groupId>
      <artifactId>rest-assured</artifactId>
      <version>2.3.1</version>
      <scope>test</scope>
    </dependency>
    <dependency>
    <groupId>com.datio.commons</groupId>
    <artifactId>examples</artifactId>
    <version>1.0.0-SNAPSHOT</version>
    </dependency>
  </dependencies>

  <!-- =================================================================================================== -->

  <build>
    <plugins>

      <!--
       The Shade plugin simply packs all dependencies into a single jar, optionally with specifyin a main class.
       There are much more options, please refer to its documentation.

       The important thing is, that the artifact created by this build will be replaced with the fat-jar
       -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-shade-plugin</artifactId>
        <version>2.3</version>
        <executions>
          <execution>
            <phase>package</phase>
            <goals>
              <goal>shade</goal>
            </goals>
            <configuration>
              <transformers>
                <transformer implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">
                  <mainClass>io.fabric8.docker.sample.demo.LogService</mainClass>
                </transformer>
              </transformers>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <plugin>
        <artifactId>maven-failsafe-plugin</artifactId>
        <version>2.17</version>
        <executions>
          <execution>
            <id>integration-test</id>
            <goals>
              <goal>integration-test</goal>
            </goals>
          </execution>
          <execution>
            <id>verify</id>
            <goals>
              <goal>verify</goal>
            </goals>
          </execution>
        </executions>
        <configuration>
          <systemPropertyVariables>
            <jolokia.url>http://localhost:${tomcat.port}/jolokia</jolokia.url>
            <jolokia.version>${jolokia.version}</jolokia.version>
          </systemPropertyVariables>
        </configuration>
      </plugin>


      <!-- Tell surefire to skip test, we are using the failsafe plugin -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-surefire-plugin</artifactId>
        <version>2.10</version>
        <configuration>
          <skip>true</skip>
        </configuration>
      </plugin>

      <!-- Need 1.7 -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-compiler-plugin</artifactId>
        <version>3.1</version>
        <configuration>
          <source>1.7</source>
          <target>1.7</target>
        </configuration>
      </plugin>
    </plugins>
  </build>

</project>
